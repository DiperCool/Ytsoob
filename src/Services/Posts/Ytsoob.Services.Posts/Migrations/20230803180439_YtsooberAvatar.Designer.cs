// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ytsoob.Services.Posts.Shared.Data;

#nullable disable

namespace Ytsoob.Services.Posts.Migrations
{
    [DbContext(typeof(PostsDbContext))]
    [Migration("20230803180439_YtsooberAvatar")]
    partial class YtsooberAvatar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ytsoob.Services.Posts.Contents.Models.Content", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<List<string>>("Files")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("files");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("pk_contents");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_contents_id");

                    b.HasIndex("PostId")
                        .IsUnique()
                        .HasDatabaseName("ix_contents_post_id");

                    b.ToTable("contents", "posts");
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Polls.Models.Option", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<long>("PollId")
                        .HasColumnType("bigint")
                        .HasColumnName("poll_id");

                    b.HasKey("Id")
                        .HasName("pk_options");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_options_id");

                    b.HasIndex("PollId")
                        .HasDatabaseName("ix_options_poll_id");

                    b.ToTable("options", "posts");
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Polls.Models.Poll", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("PollAnswerType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("poll_answer_type");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id");

                    b.HasKey("Id")
                        .HasName("pk_polls");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_polls_id");

                    b.HasIndex("PostId")
                        .IsUnique()
                        .HasDatabaseName("ix_polls_post_id");

                    b.ToTable("polls", "posts");
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Polls.Models.Voter", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<long>("OptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("option_id");

                    b.Property<long>("YtsooberId")
                        .HasColumnType("bigint")
                        .HasColumnName("ytsoober_id");

                    b.HasKey("Id")
                        .HasName("pk_voters");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_voters_id");

                    b.HasIndex("OptionId")
                        .HasDatabaseName("ix_voters_option_id");

                    b.HasIndex("YtsooberId")
                        .HasDatabaseName("ix_voters_ytsoober_id");

                    b.ToTable("voters", "posts");
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Posts.Models.Post", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.HasKey("Id")
                        .HasName("pk_posts");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_posts_id");

                    b.ToTable("posts", "posts");
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Users.Features.Models.Ytsoober", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Avatar")
                        .HasColumnType("text")
                        .HasColumnName("avatar");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid")
                        .HasColumnName("identity_id");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_ytsoobers");

                    b.ToTable("ytsoobers", (string)null);
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Contents.Models.Content", b =>
                {
                    b.HasOne("Ytsoob.Services.Posts.Posts.Models.Post", null)
                        .WithOne("Content")
                        .HasForeignKey("Ytsoob.Services.Posts.Contents.Models.Content", "PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contents_posts_post_id");

                    b.OwnsOne("Ytsoob.Services.Posts.Contents.ValueObjects.ContentText", "ContentText", b1 =>
                        {
                            b1.Property<long>("ContentId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("content_text");

                            b1.HasKey("ContentId");

                            b1.ToTable("contents", "posts");

                            b1.WithOwner()
                                .HasForeignKey("ContentId")
                                .HasConstraintName("fk_contents_contents_id");
                        });

                    b.Navigation("ContentText")
                        .IsRequired();
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Polls.Models.Option", b =>
                {
                    b.HasOne("Ytsoob.Services.Posts.Polls.Models.Poll", "Poll")
                        .WithMany("Options")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_options_polls_poll_id");

                    b.OwnsOne("Ytsoob.Services.Posts.Polls.ValueObjects.Fiction", "Fiction", b1 =>
                        {
                            b1.Property<long>("OptionId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("fiction");

                            b1.HasKey("OptionId");

                            b1.ToTable("options", "posts");

                            b1.WithOwner()
                                .HasForeignKey("OptionId")
                                .HasConstraintName("fk_options_options_id");
                        });

                    b.OwnsOne("Ytsoob.Services.Posts.Polls.ValueObjects.OptionCount", "Count", b1 =>
                        {
                            b1.Property<long>("OptionId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<long>("Value")
                                .HasColumnType("bigint")
                                .HasColumnName("option_count");

                            b1.HasKey("OptionId");

                            b1.ToTable("options", "posts");

                            b1.WithOwner()
                                .HasForeignKey("OptionId")
                                .HasConstraintName("fk_options_options_id");
                        });

                    b.OwnsOne("Ytsoob.Services.Posts.Polls.ValueObjects.OptionTitle", "Title", b1 =>
                        {
                            b1.Property<long>("OptionId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("option_title");

                            b1.HasKey("OptionId");

                            b1.ToTable("options", "posts");

                            b1.WithOwner()
                                .HasForeignKey("OptionId")
                                .HasConstraintName("fk_options_options_id");
                        });

                    b.Navigation("Count")
                        .IsRequired();

                    b.Navigation("Fiction")
                        .IsRequired();

                    b.Navigation("Poll");

                    b.Navigation("Title")
                        .IsRequired();
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Polls.Models.Poll", b =>
                {
                    b.HasOne("Ytsoob.Services.Posts.Posts.Models.Post", "Post")
                        .WithOne("Poll")
                        .HasForeignKey("Ytsoob.Services.Posts.Polls.Models.Poll", "PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_polls_posts_post_id");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Polls.Models.Voter", b =>
                {
                    b.HasOne("Ytsoob.Services.Posts.Polls.Models.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voters_options_option_id");

                    b.HasOne("Ytsoob.Services.Posts.Users.Features.Models.Ytsoober", "Ytsoober")
                        .WithMany()
                        .HasForeignKey("YtsooberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_voters_ytsoobers_ytsoober_id");

                    b.Navigation("Option");

                    b.Navigation("Ytsoober");
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Polls.Models.Poll", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Ytsoob.Services.Posts.Posts.Models.Post", b =>
                {
                    b.Navigation("Content")
                        .IsRequired();

                    b.Navigation("Poll");
                });
#pragma warning restore 612, 618
        }
    }
}
